import pytorch
from torch import nn

class FeedForward(nn.Module):
    """Feed forward network architecture with optional activation at the end.
    Parameters
    ----------
    dims : array-like
        Dictates the network number of nodes and number of layers: 
        dims = [size of input, 
            number of nodes in hidden layer 1, ..., 
            number of nodes in hidden layer N, 
            size of output]
    act : callable, optional
        The activation function that goes between each nn.Linear layer.
        Default is nn.ReLU()
    final_act : callable, optional
        The activation function that goes at the very end of the network.
        Default is None.
    
    """

    def __init__(self, dims, act=nn.ReLU(), final_act=None):
        super(FeedForward, self).__init__()
        num = len(dims) - 2
        net = nn.Sequential()
        for i in range(num):
            net.append(nn.Linear(dims[i], dims[i+1]))
            net.append(act)
        i += 1
        net.append(nn.Linear(dims[i], dims[i+1]))
                    
        if final_act is not None:
            net.append(final_act)
        self.net = net
                                 
    def forward(self, x):
        x = self.net(x)
        return x